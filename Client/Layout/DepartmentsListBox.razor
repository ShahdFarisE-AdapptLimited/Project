@using Client.Models
<h3>Departments</h3>

<div>
    <select @bind="SelectedValue" size="5" class="overflow-auto" style="font-size: large; min-width:250px; max-width:400px;">
        @if (Departments is not null)
        {
            foreach (var department in Departments)
            {
                <option class="px-2" @onmousedown="@(async (em) => mouseEvent = em)" value="@department.DepartmentId" style="@(SelectedValue == department.DepartmentId ? "background-color: lightgray" : "background-color: white")">
                    @department.DepartmentName
                </option>
            }
        }
    </select>
</div>

@if (SelectedValue != -1)
{
     <div class="dialog">

        <div class="row-container">

            <div class="column-list">
                <select size="5" class="overflow-auto">
                    @if (Employees is not null)
                    {
                        var list = Employees.ToList();
                        foreach (var Employee in list)
                        {
                            <option class="px-2" value="@Employee.EmployeeId">
                                @Employee.FirstName @Employee.LastName
                            </option>
                        }
                    }
                </select>
            </div>

            <div class="button-container">
                <button class="move-button" onclick="@OnEmployeeAdd" >>></button>
                <button class="move-button"> &lt;&lt; </button>
            </div>

            <div class="column-list">
                <select @bind="@ChosenEmployee" size="5" class="overflow-auto">
                    @if (Employees is not null)
                    {
                        var list = Employees.Where(e => e.DepartmentId == SelectedValue).ToList();
                        foreach (var Employee in list)
                        {
                            <option class="px-2" value="@Employee.EmployeeId">
                                @Employee.FirstName @Employee.LastName
                            </option>
                        }
                    }
                </select>
            </div>

        </div>

        <div class="footer">
            <button class="display-button">Display</button>
            <button class="close-button">Close</button>
        </div>
    </div>
}





@code {
    [Parameter] public List<Department> Departments { get; set; }
    [Parameter] public List<Employee> Employees { get; set; }
    [Parameter] public int SelectedValue { get; set; } //Department ID


    [Parameter] public EventCallback<int> ValueChanged { get; set; }

    [Parameter] public int ChosenEmployee { get; set; }
    [Parameter] public EventCallback<int> EmployeeAdded { get; set; }


    private MouseEventArgs mouseEvent = null!;

    protected override void OnInitialized()
    {
        SelectedValue = -1;
    }

    private void OnSelectionChange()
    {
        ValueChanged.InvokeAsync(SelectedValue);
    }

    private void Clear()
    {
        SelectedValue = -1;
        ValueChanged.InvokeAsync(SelectedValue);
    }

    private void OnEmployeeAdd()
    {
        EmployeeAdded.InvokeAsync(ChosenEmployee);
    }
}
